#!/usr/bin/env bash
if [ -z "$1" ]; then
    echo "usage: ./build target"
    echo "options:"
    echo " CLANG=1 -- use clang instead of gcc"
    echo " DEBUG=1 -- enable debug"
    echo " CO=1 -- compile only"
    echo " OBJC=1 -- top-level source file is Obj-C"
    echo ' ECHO=1 -- show commands'
    echo " STRIP=1 -- strip binary"
    echo " STRICT=1 -- more warnings"
    echo " LTO=1 -- build with LTO"
    echo " GPROF=1 -- build for gprof profiling"
    echo " PGEN=1 -- generate data for profile-guided optimization"
    echo " PUSE=1 -- use data from previous run of PGEN=1 build"
    echo " PSSL=1 -- include PolarSSL"
    echo " HYBRID=1 -- use PolarSSL/AppleCrypto hybrid"
    echo " NOSSL=1 -- don't include OpenSSL"
    echo " OPENSSL_SYS=1 -- include system OpenSSL"
    echo " MINI=1 -- link with OpenSSL mini crypto lib"
    echo " OSSL=1 -- include OpenSSL on Mac"
    echo " SSL_BOTH=1 -- include OpenSSL and Apple SSL on Mac"
    echo " NOTHREADS=1 -- disable threads"
    echo ' GCC_EXTRA="-DITER=5" -- add build flags'
    echo " LZO=1 -- build with LZO compression library"
    echo " LZ4=1 -- build with LZ4 compression library"
    echo " SNAP=1 -- build with Snappy compression library"
    exit 1
fi

# remove previous build
rm -f $1

# build options
CPPFLAGS=""
LIBS=""
LIBDIRS=""
EXTRA_SRC_OBJ=""
DBG_DIR_SUFFIX=""

# if vars defined a debug build, set DEBUG=1
if [ "$DEBUG_BUILD" = "1" ]; then
    DEBUG=1
fi

# set debug suffix for include dirs/libs
if [ "$DEBUG" = "1" ]; then
    DBG_DIR_SUFFIX="-dbg"
fi

# PolarSSL/AppleCrypto hybrid
if [ "$HYBRID" = "1" ]; then
    PSSL=1
fi

# building on Mac OS X for osx, ios, or iossim?
if [ "$APPLE_FAMILY" = "1" ]; then
    [ -z "$CLANG" ] && CLANG=1
fi

# clang support
if [ "$CLANG" = "1" ]; then
    [ -z "$GPP_CMD" ] && GPP_CMD=clang++
fi

# default commands
[ -z "$STRIP_CMD" ] && STRIP_CMD=strip
[ -z "$GPP_CMD" ] && GPP_CMD=g++

# build flags
FLAGS="-Wall"
[ "$STRICT" = "1" ] && FLAGS="$FLAGS -Wextra"
[ "$CLANG" = "1" ] && FLAGS="$FLAGS -Wno-tautological-compare -Wno-unused-private-field"
FLAGS="$FLAGS -Wno-sign-compare -Wno-unused-parameter"

# The Mac OS X tun/tap driver doesn't play with with kqueue.
# utun devices, however, work fine with kqueue.
#if [ "$PLATFORM" = "osx" ]; then
#    CPPFLAGS="$CPPFLAGS -DBOOST_ASIO_DISABLE_KQUEUE"
#fi

# PolarSSL
if [ "$PSSL" = "1" ]; then
    LIBS="$LIBS -lpolarssl"
    if [ "$HYBRID" = "1" ]; then
	CPPFLAGS="$CPPFLAGS -DUSE_POLARSSL_APPLE_HYBRID"
    else
	CPPFLAGS="$CPPFLAGS -DUSE_POLARSSL"
    fi
    CPPFLAGS="$CPPFLAGS -I$DEP_DIR/polarssl/polarssl-$PLATFORM$DBG_DIR_SUFFIX/include"
    LIBDIRS="$LIBDIRS -L$DEP_DIR/polarssl/polarssl-$PLATFORM$DBG_DIR_SUFFIX/library"
    if [ "$MINI" = "1" ]; then
	LIBS="$LIBS -lminicrypto"
	LIBDIRS="$LIBDIRS -L$DEP_DIR/minicrypto/minicrypto-$PLATFORM"
	CPPFLAGS="$CPPFLAGS -DUSE_MINICRYPTO"
	NOSSL=1
    fi
fi

# OpenSSL
if [ "$APPLE_FAMILY" = "1" ]; then
    # On Mac, only link with OpenSSL if OSSL is defined.
    # On other platforms, usually link with OpenSSL.
    if [ "$OPENSSL_SYS" == "1" ]; then
	NO_DEPRECATE="-Wno-deprecated-declarations"
    else
	NO_DEPRECATE=""
    fi
    if [ "$OPENSSL_LINK" = "1" ]; then
	LIBS="$LIBS -lcrypto -lssl"
    elif [ "$OSSL" = "1" ]; then
	CPPFLAGS="$CPPFLAGS -DUSE_OPENSSL"
	LIBS="$LIBS -lcrypto -lssl"
	[ "$CLANG" = "1" ] && [ "$NO_DEPRECATE" ] && FLAGS="$FLAGS $NO_DEPRECATE"
    elif [ "$SSL_BOTH" = "1" ]; then
	CPPFLAGS="$CPPFLAGS -DUSE_APPLE_SSL -DUSE_OPENSSL"
	LIBS="$LIBS -lcrypto -lssl"
	[ "$CLANG" = "1" ] && [ "$NO_DEPRECATE" ] && FLAGS="$FLAGS $NO_DEPRECATE"
    elif [ "$PSSL" = "1" ]; then
	NOSSL=1
    else
	NOSSL=1
	CPPFLAGS="$CPPFLAGS -DUSE_APPLE_SSL"
    fi
    LIBS="$LIBS -framework Security"
else
    if [ "$OPENSSL_LINK" = "1" ]; then
	LIBS="$LIBS -lcrypto -lssl"
    elif [ "$NOSSL" != "1" ]; then
	CPPFLAGS="$CPPFLAGS -DUSE_OPENSSL"
	LIBS="$LIBS -lssl -lcrypto -ldl"
    fi
fi
if [ "$OPENSSL_SYS" != "1" ] && [ "$OPENSSL_LINK" != "1" ] && [ "$NOSSL" != "1" ]; then
    CPPFLAGS="$CPPFLAGS -I$DEP_DIR/openssl/openssl-$PLATFORM/include"
    LIBDIRS="$LIBDIRS -L$DEP_DIR/openssl/openssl-$PLATFORM/lib"
fi

# Apple libs
if [ "$APPLE_FAMILY" = "1" ]; then
    LIBS="$LIBS -framework CoreFoundation -framework SystemConfiguration -framework IOKit"
fi

# boost
CPPFLAGS="$CPPFLAGS -I$DEP_DIR/boost"
LIBS="$LIBS -lboost_system"
LIBDIRS="$LIBDIRS -L$DEP_DIR/boost/stage-$PLATFORM$DBG_DIR_SUFFIX/lib"
if [ "$NOTHREADS" = "1" ]; then
    CPPFLAGS="$CPPFLAGS -DBOOST_DISABLE_THREADS"
else
    LIBS="$LIBS -lboost_thread"
    [ "$PLATFORM" != "android" ] && FLAGS="$FLAGS -pthread"
fi

# LZO compression
if [ "$LZO" = "1" ]; then
    LIBDIRS="$LIBDIRS -L$DEP_DIR/lzo/lzo-$PLATFORM/lib"
    CPPFLAGS="$CPPFLAGS -I$DEP_DIR/lzo/lzo-$PLATFORM/include"
    LIBS="$LIBS -llzo2"
    CPPFLAGS="$CPPFLAGS -DHAVE_LZO"
fi

# LZ4 compression
if [ "$LZ4" = "1" ]; then
    EXTRA_SRC_OBJ="$EXTRA_SRC_OBJ $DEP_DIR/lz4/lz4-$PLATFORM/lib/liblz4.a"
    CPPFLAGS="$CPPFLAGS -I$DEP_DIR/lz4/lz4-$PLATFORM/include -DHAVE_LZ4"
fi

# Snappy compression
if [ "$SNAP" = "1" ]; then
    LIBDIRS="$LIBDIRS -L$DEP_DIR/snappy/snappy-$PLATFORM$DBG_DIR_SUFFIX/lib"
    CPPFLAGS="$CPPFLAGS -I$DEP_DIR/snappy/snappy-$PLATFORM$DBG_DIR_SUFFIX/include"
    LIBS="$LIBS -lsnappy"
    CPPFLAGS="$CPPFLAGS -DHAVE_SNAPPY"
fi

# Android NDK
if [ "$PLATFORM" = "android" ]; then
    CPPFLAGS="$CPPFLAGS -D__GLIBC__"
    CPPFLAGS="$CPPFLAGS -D_GLIBCXX_HAVE_FENV_H=1"
    CPPFLAGS="$CPPFLAGS -DBOOST_NO_INTRINSIC_WCHAR_T"
fi

# Special platform flags
if [ "$PLATFORM_FLAGS" ]; then
    FLAGS="$FLAGS $PLATFORM_FLAGS"
fi

# ovpn3
CPPFLAGS="$CPPFLAGS -I$O3"

# profile-guided optimization
if [ "$PGEN" = "1" ]; then
    FLAGS="$FLAGS -fprofile-generate"
elif [ "$PUSE" = "1" ]; then
    FLAGS="$FLAGS -fprofile-use"
fi

# optimization level
FLAGS="$LIB_OPT_LEVEL $FLAGS"

# whole-program
if [ "$CLANG" == "1" ]; then
    FLAGS="-fvisibility=hidden $FLAGS"
else
    FLAGS="-fwhole-program $FLAGS"
fi

# compile only
if [ "$CO" == "1" ]; then
    OUTPUT="-c"
    LIBDIRS=""
    LIBS=""
else
    OUTPUT="-o $1"
fi

# release/debug builds
if [ "$DEBUG" = "1" ]; then
    # debug build
    FLAGS="-g $FLAGS"
else
    # release build
    [ "$LTO" = "1" ] && [ "$CLANG" != "1" ] && FLAGS="$FLAGS -flto=4 -Wl,--no-as-needed"
    [ "$GPROF" = "1" ] && FLAGS="$FLAGS -pg"
fi

# Construct command
if [ "$OBJC" == "1" ]; then
    FLAGS="$FLAGS -fobjc-arc"
    CPPFLAGS=""
    CPPFLAGS="$CPPFLAGS -I$O3/cliobjc"
    CPPFLAGS="$CPPFLAGS -I$O3/clilib/dist-static-$PLATFORM/include"
    LIBDIRS="-L$O3/clilib/dist-static-$PLATFORM/lib"
    LIBS="-lovpncli -framework Foundation $LIBS"
    SRC="$1.m $O3/cliobjc/ovpncli.mm "
    CMD="$GPP_CMD $FLAGS $GCC_EXTRA $CPPFLAGS $LIBDIRS $SRC $EXTRA_SRC_OBJ $OUTPUT $LIBS"
else
    CMD="$GPP_CMD $FLAGS $GCC_EXTRA $CPPFLAGS $LIBDIRS $1.cpp $EXTRA_SRC_OBJ $OUTPUT $LIBS"
fi

# execute CMD
[ "$ECHO" = "1" ] && echo $CMD
$CMD

# maybe strip
[ "$STRIP" = "1" ] && $STRIP_CMD $1
exit 0
